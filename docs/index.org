#+title: CERN-ROOT-mode User Manual
#+author: Jay Morgan
#+date: <2022-04-20 mer.>
#+html_head: <link rel="stylesheet" type="text/css" href="stylesheet.css"/>

* Introduction

This is the user-manual for the CERN-ROOT-mode package, the source code of which can be
found at [[https://github.com/jaypmorgan/cern-root-mode]]. In this manual, I detail how to
install, use, customise, and help develop CERN-ROOT-mode.

CERN-ROOT-mode is an Emacs major-mode for interacting with ROOT
(https://root.cern/). Specifically, this package provides the facilities to run the
ROOT command line interface/REPL.

** What is ROOT?

#+begin_quote
ROOT enables statistically sound scientific analyses and visualization of large
amounts of data: today, more than 1 exabyte (1,000,000,000 gigabyte) are stored in
ROOT files. The Higgs was found with ROOT!
#+end_quote

** What is CERN-ROOT-mode?

CERN-ROOT-mode is a major-mode in Emacs that provides the functionality to easily interact
with the ROOT REPL. In this, we have provided various functions such as: creating a
new REPL, sending lines/function definitions/evaluating files in this REPL. In
addition to working with C++ files. This functionality is extended to org-mode. In
this way, we may create C++ source code blocks and evaluate their contents, once
again, using the ROOT REPL.

#+CAPTION: A brief example of what we want CERN-ROOT-mode to do: that is evaluate C++ statements in the ROOT REPL, quickly and easily.
[[./images/brief-example.gif]]

* Installation

** Installing with =package.el=

CERN-ROOT-mode is available on [[https://melpa.org/#/cern-root-mode][Melpa]], so if you use =package.el=, and assuming that
you've added Melpa to the list of package archives (as shown below), then you can
run =(package-install 'cern-root-mode)=.

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+end_src

#+begin_src emacs-lisp
(package-install 'cern-root-mode)
#+end_src

** Manual installation

First you will need to clone the repository from Github:

#+begin_src bash
git clone https://github.com/jaypmorgan/cern-root-mode ~/.emacs.d/cern-root-mode
#+end_src

After, in Emacs, you can load the package. First we're adding this cloned directory
to the load-path. This will ensure that when we call =(load "root")=, Emacs will be
able to find a =root.el=. After, we call =(require 'cern-root-mode)= which will allow us to
begin using the package straight away. 

#+name: require-package
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/cern-root-mode/")
(load "root")
(require 'cern-root-mode)
#+end_src

If you want to configure some of the variables, these can be done using =setq=. One
variable that you might want to customise is the =cern-root-filepath=. This variable is the
path (absolute or relative) to the ROOT REPL executable.

#+name: variables
#+begin_src emacs-lisp
(setq cern-root-filepath "/path/to/root"
      cern-root-terminal-backend 'vterm)
#+end_src

You may also want to configure some key-bindings to the commonly used functions. I
would suggest that these key-bindings are only created within the C++ keymap.

#+name: keybind
#+begin_src emacs-lisp
(define-key 'c++-mode-map (kbd "C-c C-c") 'cern-root-eval-defun-maybe)
(define-key 'c++-mode-map (kbd "C-c C-b") 'cern-root-eval-buffer)
(define-key 'c++-mode-map (kbd "C-c C-l") 'cern-root-eval-file)
#+end_src

In summary we would have the following configuration:

#+begin_src emacs-lisp :noweb yes
<<require-package>>
<<variables>>
<<keybind>>
#+end_src

** Using =use-package= and =straight.el=

Here is one example of installing/configuring the package with =straight.el=:

#+begin_src emacs-lisp
(use-package cern-root-mode
  :bind (:map c++-mode-map
	     (("C-c C-c" . cern-root-eval-defun)
	      ("C-c C-b" . cern-root-eval-buffer)
	      ("C-c C-l" . cern-root-eval-file)
	      ("C-c C-r" . cern-root-eval-region)))
  :straight (cern-root-mode :type git :host github :repo "jaypmorgan/cern-root-mode")
  :config
  (setq cern-root-filepath "/path/to/root"))
#+end_src


* Using cern-root-mode

When in a C++ major-mode buffer, enter the command (using =M-x=): =cern-root-run=. This will
start a new instance of the ROOT REPL in the same window.

If you want to create a new window for the ROOT REPL, instead of using =cern-root-run,
enter the command: =cern-root-run-other-window=. This will first split the window sensibly,
then create a new ROOT REPL in the other window.

** Using ROOT in Org-mode


CERN-ROOT-mode provides the functionality to execute C++ source code blocks using the ROOT
REPL instead of the default C++ executable. This can make the process of writing C++
in org-mode more fluid (for an example, see ref:fig:org-mode-test).

#+NAME: fig:org-mode-test
#+CAPTION: Evaluating C++ source code blocks within Org-mode documents using ROOT!
[[./images/org-mode-example.gif]]

To write C++ code blocks that then are executed using ROOT, specify
=root= as the language in the =begin_src= header. For example:

#+begin_example
#+begin_src root
// write your code here.
#+end_src
#+end_example

Upon executing this code block (such as with =C-c C-c=), this code
will be executed in the ROOT REPL instead.

Code can be written and re-used over multiple code blocks with the use
of the =:session= argument (with an optional name). By providing this
argument, a ROOT REPL instance will be created that can be used within
the context of many source blocks. For example, let's create another
code block with this session argument:

#+begin_example
#+begin_src cern-root :session *my-root-session*
void test() {
	// print something
	printf("This is something");
}
#+end_src
#+end_example

When we first run this code block, CERN-ROOT-mode will create a new
instance of the ROOT REPL in the buffer named =*my-root-session*= (you
can switch to this buffer if you want to interact directly outside of
the code blocks!). This means that, by specifying the same argument to
a different code block, we can call this =test= function.

#+begin_example
#+begin_src cern-root :session *my-root-session*
test();  // call the test function
#+end_src
#+end_example

This gets us a long way to achieving the same functionality as =root --notebook=, but
in Emacs.

*** Creating Figures

Figures can be created by saving the plot before hand, and printing out the filename
of the newly saved plot. Let's explain this by way of an example. If we have a
function that creates a plot and saves it a file:

#+begin_example
#+begin_src cern-root :session *root*
const char* macro3(){
    const char* filename{"/tmp/polar-plot.png"};
    auto c = new TCanvas("myCanvas","myCanvas",600,600);
    double rmin = 0.;
    double rmax = TMath::Pi()*6.;
    const int npoints = 1000;
    double r[npoints];
    double theta[npoints];
    for (int ipt = 0; ipt < npoints; ipt++) {
        theta[ipt] = ipt*(rmax-rmin)/npoints+rmin;
        r[ipt] = TMath::Sin(theta[ipt]);
    }
    auto grP1 = new TGraphPolar(npoints,theta,r);
    grP1->SetTitle("A Fan");
    grP1->SetLineWidth(3);
    grP1->SetLineColor(2);
    grP1->Draw("L");
    gPad->Update();
    grP1->GetPolargram()->SetToRadian();
    c->SaveAs(filename);
    return filename;
}
#+end_src
#+end_example

We can then execute this function (which will save the plot), and then we just need
to print out the name of the saved file. In addition, we need to specify that our
results is a file:

#+begin_example
#+begin_src cern-root :session *root* :results output file
const char* filename = macro3();
printf("%s", filename);
#+end_src
#+end_example


* Customisation

There are only a few variables provided by the package:

- *cern-root-filepath* -- (string, default ="root"=) this is the
  absolute/relative path to the root executable. This could be left as
  the default "root" value if ROOT is available on your $PATH.
- *cern-root-command-options* -- (string, default =""=) these are the
  command line options used when starting ROOT. By default there are
  no options.
- *cern-root-prompt-regex* -- (string, default ="^\\[[0-9;^k]+m?"=) this
  is the regular expression used to find the input prompt of the ROOT
  REPL. If there is a customised prompt, this will need to be updated
  to suit the customisation.
- *cern-root-buffer-name* -- (string, default ="*ROOT*"=) what to call
  the ROOT repl buffer when it starts. This could be left as the
  default =*ROOT*=, but its there for you to modify as you please.
- *cern-root-terminal-backend* -- (symbol, default ='terminal=) the
  terminal emulator to run the ROOT instance in. There are only two
  current defined [=vterm=, =inferior=]. By default, the terminal
  backend is set to =inferior=. Though, there is still some issues in
  getting the auto-complete to work correctly. If you really need
  auto-complete, I would recommend switching the backend to ='vterm=
  (requires you've already installed vterm).


* Developing CERN-ROOT-mode

#+begin_src emacs-lisp :exports none :results none
(defun fun2org (fs)
  (if (or (macrop fs) (functionp fs))
      (let ((args (help-function-arglist fs))
	    (doc  (or (documentation fs) "No documentation."))
	    (name (symbol-name fs)))
	(format "<p class=\"fundoc\"><span class=\"fundoc_header\">Function <span class=\"fundoc_name\">%s</span> <span class=\"fundoc_arglist\">%s</span></span> 
<span class=\"fundoc_doc\">%s</span></p>\n" name args doc))
    (let ((doc  (or (documentation-property fs 'variable-documentation) "No documentation."))
	  (name (symbol-name fs))
	  (def  (eval fs)))
      	(format "<p class=\"fundoc\"><span class=\"fundoc_header\">Variable <span class=\"fundoc_name\">%s</span></span> (Default: )
<span class=\"fundoc_doc\">%s</span></p>\n" name doc))))
#+end_src

** Variable index

#+begin_src emacs-lisp :exports results :results output html
(require 'cern-root-mode)
;; with instruction from: https://kitchingroup.cheme.cmu.edu/blog/2014/10/17/Generate-emacs-lisp-documentation/
(let ((syms '(cern-root-filepath cern-root-command-options cern-root-prompt-regex cern-root-terminal-backend cern-root-buffer-name)))
  (cl-loop for s in syms
	   do (princ (fun2org s))))
#+end_src

#+RESULTS:
#+begin_export html
<p class="fundoc"><span class="fundoc_header">Variable <span class="fundoc_name">cern-root-filepath</span></span> (Default: )
<span class="fundoc_doc">Path to the ROOT executable.</span></p>
<p class="fundoc"><span class="fundoc_header">Variable <span class="fundoc_name">cern-root-command-options</span></span> (Default: )
<span class="fundoc_doc">Command line options for running ROOT.</span></p>
<p class="fundoc"><span class="fundoc_header">Variable <span class="fundoc_name">cern-root-prompt-regex</span></span> (Default: )
<span class="fundoc_doc">Regular expression to find prompt location in ROOT-repl.</span></p>
<p class="fundoc"><span class="fundoc_header">Variable <span class="fundoc_name">cern-root-terminal-backend</span></span> (Default: )
<span class="fundoc_doc">Type of terminal to use when running ROOT.</span></p>
<p class="fundoc"><span class="fundoc_header">Variable <span class="fundoc_name">cern-root-buffer-name</span></span> (Default: )
<span class="fundoc_doc">Name of the newly create buffer for ROOT.</span></p>
#+end_export

** Function index

#+begin_src emacs-lisp :exports results :results output html
;; with instruction from: https://kitchingroup.cheme.cmu.edu/blog/2014/10/17/Generate-emacs-lisp-documentation/
(let ((syms '(cern-root-run cern-root-run-other-window cern-root-switch-to-repl cern-root-eval-region
		       cern-root-eval-line cern-root-eval-string cern-root-eval-defun cern-root-eval-buffer
		       cern-root-eval-file cern-root-change-working-directory cern-root-list-input-history
		       cern-root--remembering-position cern-root--pluck-item cern-root--make-earmuff cern-root--make-no-earmuff
		       cern-root--set-env-vars)))
  (cl-loop for s in syms
	   do (princ (fun2org s))))
#+end_src

#+RESULTS:
#+begin_export html
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-run</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">Run an inferior instance of ROOT</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-run-other-window</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">Run an inferior instance of ROOT in an different window</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-switch-to-repl</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">Switch to the ROOT REPL</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-eval-region</span> <span class="fundoc_arglist">(beg end)</span></span> 
<span class="fundoc_doc">Evaluate a region in ROOT</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-eval-line</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">Evaluate this line in ROOT</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-eval-string</span> <span class="fundoc_arglist">(string)</span></span> 
<span class="fundoc_doc">Send and evaluate a string in the ROOT REPL.</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-eval-defun</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">Evaluate a function in ROOT</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-eval-buffer</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">Evaluate the buffer in ROOT</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-eval-file</span> <span class="fundoc_arglist">(filename)</span></span> 
<span class="fundoc_doc">Evaluate a file in ROOT</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-change-working-directory</span> <span class="fundoc_arglist">(dir)</span></span> 
<span class="fundoc_doc">Change the working directory of ROOT</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root-list-input-history</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">List the history of previously entered statements</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root--remembering-position</span> <span class="fundoc_arglist">(&rest body)</span></span> 
<span class="fundoc_doc">No documentation.</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root--pluck-item</span> <span class="fundoc_arglist">(el lst)</span></span> 
<span class="fundoc_doc">No documentation.</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root--make-earmuff</span> <span class="fundoc_arglist">(name)</span></span> 
<span class="fundoc_doc">Give a string earmuffs, i.e. some-name -> *some-name*</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root--make-no-earmuff</span> <span class="fundoc_arglist">(name)</span></span> 
<span class="fundoc_doc">Remove earmuffs from a string if it has them, *some-name* -> some-name</span></p>
<p class="fundoc"><span class="fundoc_header">Function <span class="fundoc_name">cern-root--set-env-vars</span> <span class="fundoc_arglist">nil</span></span> 
<span class="fundoc_doc">Setup the environment variables so that no colours or bold
fonts will be used in the REPL. This prevents comint from
creating duplicated input in trying to render the ascii colour
codes.

Function returns t if the variables have been set, else nil. This
return value is very useful for deciding if the variables should
be unset, as we will want not want to remove the user’s existing
rcfiles.</span></p>
#+end_export


** Testing


To test the functionality of the package, some unit tests have been
stored in the =tests/= directory. To run these unit tests, you can
either evaluate the specific buffer in Emacs and run =ert= (see
<https://www.gnu.org/software/emacs/manual/html_node/ert/Running-Tests-Interactively.html>
for more information), or you can them all from the command line
using:

#+begin_src bash
emacs -batch \
	-l ert \
	-l cern-root-mode.el \
	-l tests/test-cern-root-mode.el \
	-f ert-run-tests-batch-and-exit
#+END_SRC


** Contributions

All contributions should be directed to [[https://github.com/jaypmorgan/cern-root-mode]] where
you can submit issues and pull-requests.
